<?php class Blog_PageTool extends PageTool {
/**
 * The Blog PageTool is a generic web log tool, used to create one or more blogs
 * in your website that have titles, authors, content, tags and comments.
 *
 * To use the PageTool, it is required that your HTML contains certain elements
 * for where to output the content to. This is explained in the ReadMe and in 
 * the official documentation on http://php.gt
 *
 * To get a blog article by ID, use the getArticle method.
 * To get a list of blogs in date order, use the getArticleList method.
 * To automatically output the blog's article according the the current URL,
 * simply use the go method.
 */
public $blogName = "Blog";
private $_dtFormat = "jS F Y";
private $_urlFormatArray = array(
	// An array of regular expressions used to check if the curent URL is
	// in the expected format. All URLs implicitly start with /Blog/ (or what
	// the blogName is set to), and these regular expressions check the 
	// remainding portion of the URL.

	// An article:
	"/^[0-9]{4}\/[A-Z][a-z]+\/[0-9]{0,2}\/[A-Za-z\-]+\.html$/",
	"/^Archive\.html$/",
	"/^Category\/[A-Z0-9][a-z0-9\-]*\.html$/",
	"/^About\/[a-z0-9\-_]+\.html$/",
);
/**
 * Called to output a single blog file, according to the current URL.
 * URLs have to be generated by the getUrl function - in this style:
 * /Blog/2012/Feb/20/Blog+title.html, and the ID of the blog will be
 * matched against the title and date.
 */
public function go($api, $dom, $template, $tool) {
	if(!$this->checkUrl()) {
		throw new HttpError(400);
	}
	// First, obtain a list of all blogs on the current date from URL.
	// (There is probably only 1 blog for the current date, but you can't be
	// 100% sure).
	$dt = $this->getDateFromUrl();
	$articleList = $api[$this]->getArticlesByDate([
		"date" => $dt->format("Y-m-d"),
		"name_Blog" => $this->blogName,
	]);

	// Second, find a matching title from the selected date's blog list.
	// If there is not a match, but there is more than 1 article in the list,
	// throw a 400 error. 
	// If there is no match, but there is exactly 1 article in the list,
	// 301 redirect it.
	foreach ($articleList as $article) {
		$url = $this->getUrl($article);
		if($articleList->length === 1) {
			if($url !== $_SERVER["REQUEST_URI"]) {

				header("Location: $url");//, 301);
			}
		}
		else {
			// TODO: Check on title.
			die("COT");
		}
	}

	// Lastly, output the blog to the page.
	$this->output($article, $dom["body > article"]);
}

/**
 * Outputs a given blog article to a particular DomEl container element.
 * @param  array $data  Associative array of article details.
 * @param  DomEl $domEl The container for where to place the article.
 * @return DomEl        The container where the article has been placed.
 */
public function output($data = null, $domEl = null) {
	$url = $this->getUrl($data);
	// Obtain a clone of the templated element.
	$domEl[".title"]->textContent = $data["title"];
	$domEl["a.title, .title a, footer a.full, footer a.comments"]->href 
		= $url;
	$domEl["footer a.comments"]->href .= "#Comments";

	$domEl[".author .firstName"]->textContent = $data["firstName"];
	$domEl[".author .lastName"]->textContent = $data["lastName"];
	$domEl[".author .fullName"]->textContent = $data["fullName"];
	$domEl[".author a"]->href = 
		$this->blogName 
		. "/About/"
		. $data["username"];

	$dtPublished = new DateTime($data["dateTimePublished"]);

	$domEl["time"]->textContent = "";
	$domEl["time"]->appendChild($this->_dom->createTextNode(
		$dtPublished->format("j")
	));
	$domEl["time"]->appendChild($this->_dom->createElement(
		"sup", null, $dtPublished->format("S")
	));

	$domEl["time"]->appendChild($this->_dom->createTextNode(
		$dtPublished->format(" F Y")
	));

	if(empty($data["list_Category"])) {
		$domEl[".categories"]->remove();
	}
	else {
		// TODO: Output categories.
	}

	$domEl[".content"]->innerHTML = $data["content"];

	return $domEl;
}

/**
 * Builds a string containing the absolute URL to a specified blog, according to
 * the blog's name, and the blog's attributes.
 * @param  array $blogObj Associative array of blog details.
 * @return string         Absolute URL to the blog.
 */
public function getUrl($blogObj) {
	$dtPublish = new DateTime(
		empty($blogObj["dateTimePublished"])
			? $blogObj["dateTimeCreated"]
			: $blogObj["dateTimePublished"]
	);

	$url = "/{$this->blogName}/";
	$url .= $dtPublish->format("Y/M/d/");

	// Transliterate characters not in ASCII, for example "café" => "cafe".
	$title = iconv("UTF-8", "ASCII//TRANSLIT//IGNORE", $blogObj["title"]);
	$title = str_replace(" ", "_", $title);
	$title = preg_replace("/\W+/", "", $title);
	$title = preg_replace("/\s+/", "-", $title);
	$title = str_replace("_", "-", $title);
	$title = str_replace("--", "-", $title);
	$url .= urlencode($title);
	$url .= ".html";
	return $url;
}

public function getDateFromUrl($url = null) {
	if(is_null($url)) {
		$url = $_SERVER["REQUEST_URI"];
	}

	$matches = [];
	preg_match("/\/" 		// A single slash
		. $this->blogName 		// The blog name
		. "\/([0-9]+"			// The year
		. "\/[A-Za-z]+"			// The month name
		. "\/[0-9]+)"			// The day
		. "\/?/",				// An optional trailing slash 
		$url, $matches);

	$dt = DateTime::createFromFormat("Y/M/d H:i:s", $matches[1] . " 00:00:00");
	return $dt;
}

/**
 * Checks the format of the current URL. If the format matches, return true, 
 * otherwise return false. It is the responsibility of the application to then
 * deal with the response and emit suitable HttpErrors.
 * @return Boolean true if the format matches what is expected, otherwise false.
 */
public function checkUrl($url = null) {
	if(is_null($url)) {
		$url = $_SERVER["REQUEST_URI"];
	}
	$url = strtok($_SERVER["REQUEST_URI"], "?");
	$url = substr($url, strlen("/{$this->blogName}/"));
	foreach ($this->_urlFormatArray as $urlFormat) {
		if(preg_match($urlFormat, $url)) {
			return true;
		}
	}

	return false;
}

public function clientSide() {
	// Ensure that Font Awesome is loaded, for the iconset.
	$fontAwesomeExists = false;

	$linkList = $this->_dom["head link"];
	foreach ($linkList as $link) {
		$href = $link->getAttribute("href");
		if(preg_match("/\/Font\/FontAwesome\.css/i", $href)) {
			$fontAwesomeExists = true;
		}
	}

	if(!$fontAwesomeExists) {
		$publicDir = APPROOT . "/www/Font/";
		if(!is_dir($publicDir)) {
			mkdir($publicDir, 0775, true);
		}
		$dir = dir(GTROOT . "/Style/Font");
		while(false != ($file = $dir->read()) ) {
			if($file[0] == ".") {
				continue;
			}
			if(!strstr($file, "fontawesome")) {
				continue;
			}
			copy($dir->path . "/$file", $publicDir . $file);
		}
		$dir->close();
		// copy(GTROOT . "/Style/Font/FontAwesome.css", 
		// 	$publicDir . "FontAwesome.css");
		$link = $this->_dom->create(
			"link", [
			"href" => "/Font/FontAwesome.css",
			"rel" => "stylesheet"
		]);
		$this->_dom["head"]->append($link);
	}

	// TODO : Complete checking for font awesome.
	parent::clientSide();
}

/**
 * Gets an array of blog details in chronological order, newest first.
 * @param  integer $limit How many blogs to retrieve (max).
 * @return array          Array of associative arrays containing blog details.
 */
public function getArticleList($limit = 10) {
	$dbBlogList = $this->_api[$this]->getArticles([
		"name_Blog" => $this->blogName,
		"Limit" => $limit
	]);

	return $dbBlogList->result;
}

/**
 * Sets the name of the blog, that is used in the generation of URLs. Ensures
 * there is a blog of that name in the database.
 * @param string $name The name of the blog.
 */
public function setName($name = null) {
	if(!empty($name)) {
		$this->blogName = $name;		
	}

	// TODO ^! !"£% IRHGKW£HR"

	$dbResult = $this->_api[$this]->getBlogByName(["name" => $this->blogName]);
	if(!$dbResult->hasResult) {
		$this->_api[$this]->create(["name" => $this->blogName]);
	}
}

}#